/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Assessmetric from '../model/Assessmetric';

/**
* Assessmetric service.
* @module api/AssessmetricApi
* @version 1.0.0
*/
export default class AssessmetricApi {

    /**
    * Constructs a new AssessmetricApi. 
    * @alias module:api/AssessmetricApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createassessmetric operation.
     * @callback module:api/AssessmetricApi~createassessmetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessmetric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Assessmetric} assessmetric data to be created
     * @param {module:api/AssessmetricApi~createassessmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessmetric}
     */
    createassessmetric(assessmetric, callback) {
      let postBody = assessmetric;
      // verify the required parameter 'assessmetric' is set
      if (assessmetric === undefined || assessmetric === null) {
        throw new Error("Missing the required parameter 'assessmetric' when calling createassessmetric");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Assessmetric;
      return this.apiClient.callApi(
        '/assessmetric', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteassessmetric operation.
     * @callback module:api/AssessmetricApi~deleteassessmetricCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} assessmetricId the Id parameter
     * @param {module:api/AssessmetricApi~deleteassessmetricCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteassessmetric(assessmetricId, callback) {
      let postBody = null;
      // verify the required parameter 'assessmetricId' is set
      if (assessmetricId === undefined || assessmetricId === null) {
        throw new Error("Missing the required parameter 'assessmetricId' when calling deleteassessmetric");
      }

      let pathParams = {
        'assessmetricId': assessmetricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assessmetric/{assessmetricId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllassessmetric operation.
     * @callback module:api/AssessmetricApi~getAllassessmetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Assessmetric>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/AssessmetricApi~getAllassessmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Assessmetric>}
     */
    getAllassessmetric(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Assessmetric];
      return this.apiClient.callApi(
        '/assessmetric/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getassessmetric operation.
     * @callback module:api/AssessmetricApi~getassessmetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessmetric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} assessmetricId the Id parameter
     * @param {module:api/AssessmetricApi~getassessmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessmetric}
     */
    getassessmetric(assessmetricId, callback) {
      let postBody = null;
      // verify the required parameter 'assessmetricId' is set
      if (assessmetricId === undefined || assessmetricId === null) {
        throw new Error("Missing the required parameter 'assessmetricId' when calling getassessmetric");
      }

      let pathParams = {
        'assessmetricId': assessmetricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assessmetric;
      return this.apiClient.callApi(
        '/assessmetric/{assessmetricId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateassessmetric operation.
     * @callback module:api/AssessmetricApi~updateassessmetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessmetric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} assessmetricId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Assessmetric} opts.assessmetric data to be updated
     * @param {module:api/AssessmetricApi~updateassessmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessmetric}
     */
    updateassessmetric(assessmetricId, opts, callback) {
      opts = opts || {};
      let postBody = opts['assessmetric'];
      // verify the required parameter 'assessmetricId' is set
      if (assessmetricId === undefined || assessmetricId === null) {
        throw new Error("Missing the required parameter 'assessmetricId' when calling updateassessmetric");
      }

      let pathParams = {
        'assessmetricId': assessmetricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Assessmetric;
      return this.apiClient.callApi(
        '/assessmetric/{assessmetricId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
